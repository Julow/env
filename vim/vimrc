" Vim config

set encoding=utf8
set ignorecase
set hlsearch
set showmatch

set nocompatible
set noswapfile

set wildmenu
set wildmode=longest:full
set wildignorecase

set mouse=a

syntax enable

filetype plugin on
filetype indent on

set backspace=eol,start,indent

set autoread
" Autoread when a buffer is focused. Don't apply to cmd prompt
autocmd BufEnter * if getcmdwintype() == '' | checktime % | endif

set t_Co=16

set ttimeoutlen=10

set diffopt+=foldcolumn:0

" Disable netrw
let loaded_netrw = 1
let loaded_netrwPlugin = 1

" Even if netrw is disabled, this is used by other plugins
" (eg. 'xdg_open.vim')
let g:netrw_gx = "<cfile>"

" Indent
set smarttab
set shiftwidth=2
set tabstop=2
set autoindent
set smartindent
set expandtab

" Line wrapping
set wrap
set showbreak=‚é•
set breakindent

" Render whitespaces
set list
set listchars=tab:‚á¢\ ,trail:_,nbsp:‚çΩ,multispace:\ \ \ ‚ãÆ,extends:‚Ä¶
hi SpecialKey ctermbg=none ctermfg=grey

" Formatting
set formatoptions+=roj
set nojoinspaces

" Show number of match when searching
set shortmess-=S

" Fold
" Override ZZ and ZQ bindings
set foldmethod=indent
set foldlevelstart=99
nnoremap Z za
vnoremap Z zf
nnoremap z1 :set foldlevel=1<return>
nnoremap z2 :set foldlevel=2<return>

" C-c to clear highlighted text
" This override default C-c
" A custom event is used to allow extensibility
nnoremap <silent> <C-c> :doautocmd User ClearHighlight<return>
inoremap <silent> <C-c> <Esc><C-c>

function! s:clear_highlight()
  if v:hlsearch
    call feedkeys(":nohlsearch\<return>")
  endif
endfunction
autocmd User ClearHighlight call s:clear_highlight()

" Scroll
set scrolloff=10

" Remap # to search for the current word and to search forward
" Use the selection in visual mode
nnoremap # "vyiwge/\<\V<C-R>v\><return>
vnoremap # "vyge/\V<C-R>v<return>

" Repeat substitution and search
nnoremap <expr> & expand(v:hlsearch) ? 'n&' : '"vyiw:s/\C\<\V<C-R>v\>/'
" Substitution from selection
vnoremap & "vy:s/\C\V<C-R>v/

" dP and dO, diffput and diffget the current line
nnoremap dO V:diffget<return>
nnoremap dP V:diffput<return>

" Use system clipboard
set clipboard=unnamedplus

" Set window title
set t_ts=]2;
set t_fs=\\
autocmd BufEnter * let &titlestring = expand("%:t")
set title

" Ruler showing filename
" Show size of the selection in visual mode
function! S_selection(mode)
  let l:c = getpos(".")
  let l:v = getpos("v")
  let l:lines = abs(l:c[1] - l:v[1]) + 1
  if a:mode ==# "v"
    let l:chars = abs((line2byte(l:c[1]) + l:c[2]) - (line2byte(l:v[1]) + l:v[2])) + 1
  elseif a:mode ==# "V"
    let l:chars = line2byte(max([l:c[1], l:v[1]]) + 1) - 1 - line2byte(min([l:c[1], l:v[1]])) + 1
  else
    let l:chars = abs(l:c[2] - l:v[2]) + 1
  endif
  return l:lines . "-" . l:chars
endfunction

" Return the highlight group for the current mode
function! S_mode_hi_group(m)
  if a:m =~# "^[ncr]"
    if a:m =~# "^n[io]"
      return "S_mode_pending"
    else
      return "S_mode_n"
    endif
  elseif a:m =~# "^[vV\<C-V>sS\<C-S>]"
    return "S_mode_v"
  elseif a:m =~# "^[iR]"
    return "S_mode_i"
  elseif a:m =~# "^t"
    return "S_mode_t"
  endif
  return "S_mode_other"
endfunction

" Rewrite some filenames (see Update_s_filename)
let g:s_fugitive_filename_const = {
  \ ".git/index": "Git Status",
  \ ".git/COMMIT_EDITMSG": "Git Commit",
  \ ".git/rebase-merge/git-rebase-todo": "Git Rebase",
  \ }

" Do some processing on the current filename for the status line.
" Set 'b:s_filename' to the current filename, possibly modified.
" Set 'b:s_filename_decorator' to the length of the filename prefix that
" should be highlighted differently.
function! Update_s_filename(bufnr)
  let l:f = bufname(a:bufnr)
  " Length of the decorator, which is highlighted differently. Stored
  " separately to be sure the filename is always entire, for safety.
  let l:d = 0

  if l:f =~ "^fugitive://"
    " Fugitive URIs are shortened to 'symbolic:path'
    " Useful to know which is which when using Fugitive diffsplit
    let l:obj = trim(fugitive#Object(l:f), ":") " Returns a string 'HASH:PATH'
    if l:obj == ''
      " Couldn't decode. Detect some special files but otherwise, show the
      " full URL
      let l:real = fnamemodify(fugitive#Real(l:f), ":.")
      if has_key(g:s_fugitive_filename_const, l:real)
        let l:f = get(g:s_fugitive_filename_const, l:real)
        let l:d = len(l:f)
      else
        let l:d = 11
      endif
    else
      let [ l:hash; path ] = split(l:obj, ":", 1)
      if l:hash == '0'
        let l:symbolic = "staged"
      else
        let l:symbolic = systemlist("git name-rev --name-only " . l:hash)[0]
      endif
      let l:f = join([ l:symbolic ] + path, ":")
      let l:d = len(l:symbolic) + 1
    endif

  elseif l:f =~ "^/"
    " Convert absolute paths to relative paths
    let l:f = fnamemodify(l:f, ":~:.")
    if l:f =~ "^/"
      " Couldn't convert to relative

      if getbufvar(a:bufnr, "current_syntax") == "help"
        let l:f = "help:" . fnamemodify(l:f, ":t:r")
        let l:d = 5

      elseif l:f =~ "^/nix/store/"
        let l:f = "nix:" . l:f[44:]
        let l:d = stridx(l:f, "/") + 1
      endif
    endif
  endif

  if l:f == ""
    let l:f = "<new>"
    let l:d = len(l:f)
  endif

  call setbufvar(a:bufnr, "s_filename", l:f)
  call setbufvar(a:bufnr, "s_filename_decorator", l:d)
endfunction

autocmd BufReadPost,TerminalOpen,BufFilePost * call Update_s_filename("%")

" Returns 1 whether terminal status should be added to the statusline, 0
" otherwise. When the job is done, sets 'b:s_terminal_status' and
" 'b:s_terminal_time'.
function! S_terminal_update(bufnr)
  if getbufvar(a:bufnr, "&buftype", "") == "terminal"
    let job = term_getjob(a:bufnr)
    let info = job_info(job)
    if info["status"] == "dead"
      if getbufvar(a:bufnr, 's_terminal_time', "") == ""
        let t = reltime(getbufvar(a:bufnr, 'terminal_start_time'))
        let s = info["exitval"]
        call setbufvar(a:bufnr, "s_terminal_status", (s == 0) ? "" : s)
        call setbufvar(a:bufnr, "s_terminal_time", printf("%.0fs", reltimefloat(t)))
      endif
      return 1
    endif
  endif
  return 0
endfunction

autocmd TerminalOpen * let b:terminal_start_time = reltime()

function! Statusline()
  let l:s = ""
  let l:mode = (win_getid() == g:statusline_winid) ? mode(1) : "n"
  let l:bufnr = winbufnr(win_id2win(g:statusline_winid))

  " Update terminal status and show exit status and running time
  if S_terminal_update(l:bufnr)
    let l:s .= "%#S_terminal_fail#%( [exit %{b:s_terminal_status}]%)"
    let l:s .= "%#S_terminal_time# Terminated after %{b:s_terminal_time}%*"
  endif

  " Update b:s_filename and b:s_filename_decorator
  if getbufvar(l:bufnr, 's_filename', "") == ""
    call Update_s_filename(l:bufnr)
  endif

  " Decorated filename
  let l:s .= "%="
  let l:f = getbufvar(l:bufnr, "s_filename")
  let l:decorator = getbufvar(l:bufnr, "s_filename_decorator")
  if l:decorator > 0
    let l:s .= "%#S_filename_decorator#" . strpart(l:f, 0, l:decorator)
    let l:f = l:f[l:decorator:]
  endif
  let l:s .= "%#" . S_mode_hi_group(l:mode) . "#" . substitute(l:f, '%', '%%', 'g') . "%*"

  " Vim's flags and cursor position
  let l:s .= " %(%q %)%(%w %)%l:%c"
  " Selection
  if l:mode =~# "^[vV\<C-V>]"
    let l:s .= " " . S_selection(l:mode[0])
  endif
  " Line feed format
  if getbufvar(l:bufnr, "&fileformat") != "unix"
    let l:s .= "%#S_linef# " . getbufvar(l:bufnr, "&fileformat")
  endif
  " More discreet indicator for unmodifiable or readonly buffers
  if !getbufvar(l:bufnr, "&modifiable") || getbufvar(l:bufnr, "&readonly")
    let l:s .= "%#S_readonly# RO"
  endif

  " Show the status part of the tabline if there's no tabline, only for the
  " bottom left window
  if tabpagenr('$') == 1 && win_getid(winnr('$')) == g:statusline_winid
    let l:s .= Tabline_status()
  endif
  return l:s . " "
endfunction

set statusline=%!Statusline()
set laststatus=2
set noruler
set noshowmode

" Show project-wide informations on the right
function! Tabline()
  let s = ""
  let curr_tp = tabpagenr()
  for i in range(1, tabpagenr("$"))
    let s .= (i == curr_tp) ? "%#TabLineSel#" : "%#TabLine#"
    let s .= "%" . i . "T %{Tabline_label(" . i . ")} "
  endfor
  let s .= "%#TabLineFill#%="
  let s .= Tabline_status()
  let s .= " "
  return s
endfunction

function! Tabline_label(i)
  let buflist = tabpagebuflist(a:i)
  let winnr = tabpagewinnr(a:i)
  let buf = buflist[winnr - 1]
  let name = getbufvar(buf, "s_filename")
  if name == ""
    call Update_s_filename(buf)
    let name = getbufvar(buf, "s_filename")
  endif
  return name
endfunction

function! Tabline_status()
  let s = "%#S_workspace#%( " . $WORKSPACE . "%)" " Workspace name, if any
  let s .= "%#S_fugitive#%( %{FugitiveHead(8)}%)" " Current Git branch
  return s
endfunction

set tabline=%!Tabline()

" Per project vimrc
set exrc
set nomodeline " Disable modeline
set secure

" Color adjustments
hi Folded ctermbg=none ctermfg=blue

hi DiffAdd ctermbg=lightgrey ctermfg=green
hi DiffDelete ctermbg=lightgrey ctermfg=red
hi DiffChange ctermbg=none ctermfg=none
hi DiffText ctermbg=lightgrey ctermfg=none

hi VertSplit ctermbg=none ctermfg=lightgrey cterm=none

" Statusline
hi StatusLine ctermbg=lightgrey ctermfg=black cterm=nocombine
" nocombine is dummy to avoid Vim printing '^^^'
hi StatusLineNC ctermbg=lightgrey ctermfg=black cterm=none
hi StatusLineTerm ctermbg=lightgrey ctermfg=none cterm=none
hi StatusLineTermNC ctermbg=lightgrey ctermfg=none cterm=none
hi S_readonly ctermbg=lightgrey ctermfg=yellow cterm=none
hi S_linef ctermbg=lightgrey ctermfg=red cterm=none
hi S_mode_n ctermbg=lightgrey ctermfg=none cterm=none
hi S_mode_i ctermbg=yellow ctermfg=none cterm=none
hi S_mode_v ctermbg=green ctermfg=none cterm=none
hi S_mode_t ctermbg=blue ctermfg=none cterm=none
hi S_mode_other ctermbg=lightgrey ctermfg=blue cterm=none
hi S_mode_pending ctermbg=lightgrey ctermfg=red
hi S_terminal_fail ctermbg=lightgrey ctermfg=red cterm=none
hi S_terminal_time ctermbg=lightgrey ctermfg=yellow cterm=none
hi S_filename_decorator ctermbg=lightgrey ctermfg=magenta cterm=none

" Tabline
hi TabLine ctermbg=lightgrey ctermfg=none cterm=none
hi TabLineSel ctermbg=none ctermfg=none cterm=none
hi TabLineFill ctermbg=lightgrey ctermfg=none cterm=none
hi S_fugitive ctermbg=lightgrey ctermfg=magenta cterm=none
hi S_workspace ctermbg=lightgrey ctermfg=green cterm=none

function! Gdiffb(ref_opt)
  let ref = a:ref_opt == "" ? "MAIN" : a:ref_opt
  let base = system("git merge-base '" . ref . "' HEAD")
  execute ':Gdiffsplit ' . base
endfunction

" :Gdiffb
" Opens vim-fugitive split diff with the merge-base
command! -nargs=? -complete=custom,fugitive#CompleteObject Gdiffb call Gdiffb(<q-args>)

" \g to open fugitive status
nnoremap <Leader>g :tab Git<return>

" Don't move the cursor to first column when scrolling
set nostartofline

" ftdetect
autocmd BufNewFile,BufRead *.xkb setlocal ft=xkb
autocmd BufNewFile,BufRead *.t setlocal ft=cram
autocmd BufNewFile,BufRead *.tsv setlocal ft=tsv

" Q to save file
nnoremap Q :w<return>

" Enable matchit
packadd! matchit

" Delete to the end of the line or to the end of the current matchit pair
function! End_of_line_or_pair()
  let l:initial = getpos('.')
  " Go left, in case we are on the beginning of a pair
  normal h]%
  let l:endofpair = getpos('.')
  call setpos('.', l:initial) " Restore cursor position
  " endofpair is on the same line but isn't under the cursor
  if l:initial[1] == l:endofpair[1] && l:initial[2] < l:endofpair[2]
    normal v
    let l:endofpair[2] -= 1
    call setpos('.', l:endofpair)
  else
    normal vg_
  endif
endfunction

" Text object for End_of_line_or_pair
onoremap <silent> a]% :<C-u>call End_of_line_or_pair()<return>
vnoremap <silent> a]% :<C-u>call End_of_line_or_pair()<return>

nmap D da]%
nmap C ca]%
nmap Y ya]%

" Mapping for vim-surround with operator up
nmap g( ysa]%(
nmap g) ysa]%)
nmap g{ ysa]%{
nmap g} ysa]%}
nmap g[ ysa]%[
nmap g] ysa]%]
nmap g"" ysa]%"
nmap g"' ysa]%'
nmap g"` ysa]%`
nmap g< ysa]%<
nmap g> ysa]%>

" -

" Delete text without yanking
nnoremap <Leader>d "_d
vnoremap <Leader>d "_d

" ---

" Require plugin https://github.com/mkotha/conflict3
" [C and ]C to navigate between conflict and enable conflict3 highlighting
" <Leader>C to try to automatically resolve
" <Leader>K to resolve the conflict by taking the version the cursor is in

" Search a conflict and highlight it with conflict3
" Flag can be 'b' to search backward
function! Next_conflict(flag)
  let next = search('\V\^<<<<<<<', a:flag)
  if next == 0
    echohl ErrorMsg
    echomsg "No conflict found"
    echohl None
    return
  endif
  call setpos('.', next)
  echomsg "Found"
  Conflict3Highlight
endfunction

nnoremap [C :call Next_conflict('b')<return>
nnoremap ]C :call Next_conflict('')<return>
nnoremap <Leader>C :Conflict3ResolveAll \| Conflict3Shrink!<return>
nnoremap <Leader>K :Conflict3TakeThis<return>

hi link Conflict3Local DiffAdd
hi Conflict3Remote ctermbg=lightgrey ctermfg=lightblue
hi link Conflict3Both DiffText
hi link Conflict3LocalDel DiffDelete
hi Conflict3RemoteDel ctermbg=lightgrey ctermfg=red

" Clear conflict3 highlight on C-c
autocmd User ClearHighlight Conflict3Clear

function! Setup_conflicts_plugin()
  " % to jump between the markers
  let b:match_words = get(b:, "match_words", "") . ",<<<<<<<:=======:>>>>>>>"

  " Highlight conflict markers
  " https://vi.stackexchange.com/questions/19639/change-background-color-of-git-conflict-marker-sections
  syn region conflictStart start=/^<<<<<<< .*$/ end=/^\ze\(=======$\||||||||\)/
  syn region conflictMiddle start=/^||||||| .*$/ end=/^\ze=======$/
  syn region conflictEnd start=/^\(=======$\||||||| |\)/ end=/^>>>>>>> .*$/
endfunction

highlight conflictStart ctermfg=red
highlight conflictMiddle ctermfg=blue
highlight conflictEnd ctermfg=green

autocmd BufNewFile,BufRead * call Setup_conflicts_plugin()

" Replace the range lnum,lnum+count by the content of a file
function! Replace_from_file(file, lnum, count)
  " :delete will insert an emtpy blank line if we clear the whole buffer
  " We'll need to remove it later
  let extra_blank_line = (a:lnum == 1 && a:count == line("$")) ? 1 : 0
  execute a:lnum "delete _" a:count
  execute (a:lnum - 1) "read" a:file
  if extra_blank_line == 1
    let last_line = line("$")
    call assert_true(getline(last_line) == "")
    execute last_line "delete _"
  endif
endfunction

" Run the formatter, handle non-zero exit code and stderr
" "%" is expanded to the current file name, shell escaped
function! Run_formatter(formatprg, lnum, count)
  " Expand %
  let cmd = expandcmd(a:formatprg)
  let lines = getline(a:lnum, a:lnum + a:count - 1)
  " Format, redirect output to a temporary file
  let tempfile = tempname()
  let errors = systemlist(cmd . " > " . tempfile, lines)
  if v:shell_error == 0
    " Update buffer
    call Replace_from_file(tempfile, a:lnum, a:count)
  else
    echohl ErrorMsg
    echon "Error while executing '" cmd "' (" v:shell_error "):\n" join(errors, "\n")
    echohl None
  endif
  call delete(tempfile)
  return 0
endfunction

" formatexpr, this is better than the default because it handles errors
function! Format_expr()
  if &formatprg == ""
    return 1 " No formatprg, fallback to default
  endif
  if v:char != ""
    return 1 " Automatic formatting, fallback to default
  endif
  call Run_formatter(&formatprg, v:lnum, v:count)
endfunction

set formatexpr=Format_expr()

" Format the whole buffer
" Use b:full_formatprg over &formatprg if set.
function! Format_buffer()
  let formatprg = exists('b:full_formatprg') ? b:full_formatprg : &formatprg
  let cpos = getcurpos()
  call Run_formatter(formatprg, 1, line("$"))
  call setpos('.', cpos) " Restore the cursor position
endfunction

" Format a paragraph
nnoremap gQ gqip
" Format the whole buffer
nnoremap \Q :call Format_buffer()<return>

" Map C-= to reindent the current line
" Also in insert mode
inoremap <C-=> <C-o>==
nnoremap <C-=> ==

" Incremented everytime the quickfix list is updated. [t:loclist_i] will be
" set to [g:quickfix_i + 1] everytime the location list is updated.
" Navigation mappings will affect the location list if
" [t:loclist_i > g:quickfix_i], the quickfix list otherwise.
let g:quickfix_i = 0
function! Quickfix_increment()
  let l:info = getwininfo(win_getid())[0]
  if l:info.loclist
    let t:loclist_i = g:quickfix_i + 1
  elseif l:info.quickfix
    let g:quickfix_i += 1
  endif
endfunction
autocmd FileType qf call Quickfix_increment()

function! Quickfix_or_loclist(qf, ll)
  return get(t:, 'loclist_i', 0) > g:quickfix_i ? a:ll : a:qf
endfunction

" Bind [q and ]q to navigate the loclist or the quickfix list
nnoremap [q :<C-r>=Quickfix_or_loclist("cprevious", "lprevious")<return><return>
nnoremap ]q :<C-r>=Quickfix_or_loclist("cnext", "lnext")<return><return>
nnoremap <Leader>q :<C-r>=Quickfix_or_loclist("cc", "ll")<return><return>

" Other settings are unreliable.
" <C-Enter> in qf is remapped to open a new window.
set switchbuf=uselast

" Jump to the first error in the quickfix or loclist
autocmd QuickFixCmdPost * cwindow
autocmd FileType qf call timer_start(50, { _ -> execute(Quickfix_or_loclist("cc!", "ll!")) })

" See quickfix ft plugin in after/ftplugin/qf.vim

" Recursive grep
set grepprg=rg\ --vimgrep
set grepformat^=%f:%l:%c:%m

nnoremap <Leader>m :make!<return>

" Close the quickfix window
nnoremap <Leader>M :cclose<return>

" wincmd
nmap <Space> <C-w>
" Add a binding for :tabonly
nnoremap <C-w>O :tabonly<return>
nnoremap <C-w>N :tab split<return>

" Terminal window mappings
" Use a simpler key to type for termwinkey. Type twice to send to terminal.
set termwinkey=<Esc>
" Normal mode mappings I often use
tnoremap <Esc>. <Esc>""
tnoremap <Esc>! <Esc>:term<space>
" Window/tab switching
tnoremap <C-j> <Esc>w
tnoremap <C-k> <Esc>W
tnoremap <C-h> <Esc>gT
tnoremap <C-l> <Esc>gt

" Prefix with termwinkey to send to terminal.
tnoremap <Esc><C-h> <C-h>
tnoremap <Esc><C-j> <C-j>
tnoremap <Esc><C-k> <C-k>
tnoremap <Esc><C-l> <C-l>

let g:runtest_buf = -1

" Run a command in a new terminal window.
" Reuse the previous terminal buffer if any, killing the previous job if it's
" still running.
function! Runtest(cmd)
  let options = {}
  let previous_buf = bufnr(g:runtest_buf)
  if previous_buf > 0 " Reuse previous terminal window if any
    let job = term_getjob(previous_buf)
    let info = job_info(job)
    if info["status"] == "run" " Kill the previous job if running
      if job_stop(job) != 1
        echo "Couldn't kill current job"
        return
      endif
      call term_wait(previous_buf)
    endif
    let win = bufwinnr(previous_buf)
    execute win "wincmd w"
    let options['curwin'] = 1
  endif
  let g:runtest_buf = term_start(a:cmd, options)
endfunction

function! Runtest_runtestprg()
  if !exists("g:runtestprg")
    echohl WarningMsg
    echon "g:runtestprg is not set"
    echohl None
    return
  endif
  call Runtest(expandcmd(g:runtestprg))
endfunction

" Runtest
" Example: let g:runtestprg = "make test"
nnoremap <Leader>r :call Runtest_runtestprg()<return>

" Find a file by name with fd
function! Fd(...)
  let args = map(copy(a:000), 'shellescape(v:val)')
  let lines = systemlist('fd ' . g:fd_args . ' ' . join(args))
  if len(lines) == 0
    echohl WarningMsg
    echo "No match found"
    echohl None
  else
    call setqflist([], 'r', {'lines': lines, 'efm': '%f'})
    cwindow
  endif
endfunction

let g:fd_args = "--follow"

command! -nargs=* -complete=dir Fd call Fd(<f-args>)

" gf open file that don't exist
nnoremap gf :e <cfile><return>
" gF to open a file in a new window
nnoremap gF :split <cfile><return>

" Originally from kristijanhusak, https://github.com/tpope/vim-fugitive/issues/132#issuecomment-649516204
" With some improvements
command! -nargs=* DiffHistory call s:view_git_history(<f-args>)

function! s:view_git_history(...) abort
  let args = map(copy(a:000), 'shellescape(v:val)')
  execute "Git difftool --name-only " . join(args)
  call s:diff_current_quickfix_entry()
  " Bind <CR> for current quickfix window to properly set up diff split layout after selecting an item
  " There's probably a better way to map this without changing the window
  copen
  nnoremap <buffer> <CR> <CR><BAR>:call <sid>diff_current_quickfix_entry()<CR>
  wincmd p
endfunction

function s:diff_current_quickfix_entry() abort
  " Cleanup windows
  for window in getwininfo()
    if window.winnr !=? winnr() && bufname(window.bufnr) =~? '^fugitive:'
      exe 'bdelete' window.bufnr
    endif
  endfor
  cc
  call s:add_mappings()
  let qf = getqflist({'context': 0, 'idx': 0})
  if get(qf, 'idx') && type(get(qf, 'context')) == type({}) && type(get(qf.context, 'items')) == type([])
    let diff = get(qf.context.items[qf.idx - 1], 'diff', [])
    echom string(reverse(range(len(diff))))
    for i in reverse(range(len(diff)))
      " Silent to avoid error on removed files
      silent exe (i ? 'leftabove' : 'rightbelow') 'vert diffsplit' fnameescape(diff[i].filename)
      call s:add_mappings()
    endfor
  endif
endfunction

function! s:add_mappings() abort
  nnoremap ]q :cnext <BAR> :call <sid>diff_current_quickfix_entry()<CR>
  nnoremap [q :cprevious <BAR> :call <sid>diff_current_quickfix_entry()<CR>
  " Reset quickfix height. Sometimes it messes up after selecting another item
  11copen
  wincmd p
endfunction

" Shortcut for open running a program in the terminal
nnoremap ! :term<space>
nnoremap <C-1> :tab term<space>

" Restart a terminal job
function! Restart_terminal_job(...)
  let buf = bufnr("%")
  let job = term_getjob(buf)
  let info = job_info(job)
  if info["status"] == "run"
    if job_stop(job) != 1
      echo "Couldn't kill current job"
      return
    endif
    call term_wait(buf)
  endif
  let cmd = (len(a:000) > 0) ? copy(a:000) : info["cmd"]
  call term_start(cmd, #{ curwin: 1 })
endfunction

function! Last_job_command()
  let info = job_info(term_getjob(bufnr("%")))
  let cmd = map(copy(info["cmd"]), 'escape(v:val, "#%\\")')
  return join(cmd, " ")
endfunction

" Terminal normal mapping
function! Setup_terminal_rc()
  setlocal nolist

  " Restart a job in the current terminal
  " If no arguments are given, restart the previous command
  command! -nargs=* -complete=file RestartJob call Restart_terminal_job(<f-args>)

  " Restart a job in a terminal
  nnoremap <buffer> <C-return> :RestartJob<return>

  " Type RestartJob command and allow to edit it
  nnoremap <buffer> <C-1> :RestartJob <C-r>=Last_job_command()<return>
endfunction

autocmd TerminalOpen * call Setup_terminal_rc()

" Clear Sneak highlighting and states with C-c
autocmd User ClearHighlight call sneak#cancel()

function! Update_word_highlighting()
  if b:wh_match_id != -1
    call matchdelete(b:wh_match_id)
  endif
  " Find the word under the cursor
  let [_, l, c, _] = getpos('.')
  let word = matchstr(getline(l), '\k\+\%' . c . 'c\k*')
  if word == ""
    let b:wh_match_id = -1
  else
    let b:wh_match_id = matchadd("Word_highlight", '\V\<' . word . '\>', 42)
  endif
endfunction

function! Enable_word_highlighting()
  let b:wh_match_id = -1
  call Update_word_highlighting()
endfunction

function! Disable_word_highlighting()
  if b:wh_match_id != -1
    call matchdelete(b:wh_match_id)
    let b:wh_match_id = -1
  endif
endfunction

autocmd InsertEnter * set hlsearch | call Enable_word_highlighting()
autocmd CursorMovedI * call Update_word_highlighting()
autocmd InsertLeave * call Disable_word_highlighting()

hi Word_highlight ctermbg=none ctermfg=none cterm=underline

function! Pos_equal(a, b)
  return (a:a[1] == a:b[1] && a:a[2] == a:b[2])
endfunction

function! Cursor_in_the_middle(dir)
  let last_pos = getpos("''")
  let curr_pos = getcurpos()
  let a_pos = get(b:, "a_pos", last_pos)
  let b_pos = get(b:, "b_pos", curr_pos)
  if a_pos[1] > b_pos[1] || (a_pos[1] == b_pos[1] && a_pos[2] > b_pos[2])
    let [a_pos, b_pos] = [b_pos, a_pos] " a_pos <= b_pos
  endif
  if Pos_equal(get(b:, "curr_pos", last_pos), curr_pos)
    " Didn't move since. Defaults to 'last_pos' to avoid the initial state
    " a_pos <= curr_pos <= b_pos
    let b:a_pos = (a:dir > 0) ? b_pos : a_pos
    let b:b_pos = curr_pos
  else
    let b:a_pos = last_pos
    let b:b_pos = curr_pos
  endif
  let b:curr_pos = copy(curr_pos)
  let i = (b:a_pos[1] != b:b_pos[1]) ? 1 : 2 " Vertical or horizontal
  let b:curr_pos[i] = (b:a_pos[i] + b:b_pos[i]) / 2
  call setpos(".", b:curr_pos)
endfunction

nnoremap <C-n> :call Cursor_in_the_middle(-1)<return>
nnoremap <C-m> :call Cursor_in_the_middle(1)<return>
vnoremap <C-n> :<C-u>call Cursor_in_the_middle(-1)<return>
vnoremap <C-m> :<C-u>call Cursor_in_the_middle(1)<return>

" Copy the path to the current file into clipboard
nnoremap y<C-f> :let @+ = expand("%")<return>
" With line number
nnoremap y<C-l> :let @+ = expand("%") . ":" . line(".")<return>

" Configuration for plugin 'dwm.vim'
let g:dwm_map_keys = 0 " Disable default bindings
nmap <C-Space> <Plug>DWMFocus
" C-j and C-k for window navigation, C-Space for focus.
nnoremap <C-j> <C-w>w
nnoremap <C-k> <C-w>W
" Remap 'new' and 'close' bindings.
nnoremap <C-w>n <Plug>DWMNew
nnoremap <C-w>q <Plug>DWMClose

" Map C-h and C-l for tab movements
nnoremap <C-h> gT
nnoremap <C-l> gt

set winwidth=80

" Remap visual mode <p> to not change registers
" Assumes clipboard=unnamedplus
if has('clipboard')
  vnoremap p "_c<C-r><C-p>+<Esc>
else
  vnoremap p "_c<C-r><C-p>"<Esc>
endif

" From https://stackoverflow.com/questions/3878692/how-to-create-an-alias-for-a-command-in-vim
fun! SetupCommandAlias(from, to)
  exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfun

" Command shorthands
call SetupCommandAlias("G", "Git -p")

inoremap <C-,> <C-r>=strftime("%F")<Enter><C-g>u<C-r>=strftime(" %H:%M")<Enter>
imap <C-S-,> <C-,>

nnoremap <C-w>= :set cmdheight=1<return><C-w>_<C-w>=

" Helper function for Cmd_operator
function! Cmd_operator_func(command)
  execute "'[,']" .. a:command
endfunction

" Run a command on a range selected by a motion.
" For example, to define an operator that calls :sort on a range of line:
"     nnoremap <expr> ,s Cmd_operator("sort")
" Then, to sort a paragraph, type:
"     ,sap
" It's repeatable with .
function! Cmd_operator(command)
  let &opfunc = {mode -> Cmd_operator_func(a:command)}
  return "g@"
endfunction

" Sort a range of lines
nnoremap <expr> <Leader>s Cmd_operator("sort")
vnoremap <Leader>s :sort<return>

" Enable folding from the builtin xml plugin, which is disabled for some
" reason.
let g:xml_syntax_folding = 1

" Start diff mode on all windows in the current tab
function! Diff()
  exe "diffoff!"
  exe "windo diffthis"
endfunction

command! Diff call Diff()
" Clear diff on Ctrl+C
autocmd User ClearHighlight diffoff!

" Quick access to files with ':find', abbreviated to 'R'
nnoremap R :sfind |
" Not used on my system
set path-=/usr/include

let g:UltiSnipsSnippetDirectories = [ $HOME.'/w/env/vim/UltiSnips' ]

" Jump between files in the jump list
" g<C-o> and g<C-i> are equivalent to repeatedly typing <C-o> and <C-i> until
" jumping to a different file.

" Compute the number of jump entry to skip in both directions as a pair before
" jumping to a different file or hitting the end of the jump list.
function! Jumplist_jump_file()
  let [jumps_, cur] = getjumplist()
  if cur >= len(jumps_)
    let cur = cur - 1
  endif
  let cur_bufnr = jumps_[cur].bufnr
  let prev = cur
  while prev > 0 && jumps_[prev].bufnr == cur_bufnr
    let prev = prev - 1
  endwhile
  let next = cur
  while next < len(jumps_) && jumps_[next].bufnr == cur_bufnr
    let next = next + 1
  endwhile
  return [ cur - prev, next - cur ]
endfunction

nnoremap g<C-o> :exe "normal <C-r>=Jumplist_jump_file()[0]<return>\<C-o>"<return>
nnoremap g<C-i> :exe "normal <C-r>=Jumplist_jump_file()[1]<return>\<C-i>"<return>

" Command line: Write word under cursor in buffer
cnoremap <C-1> <C-r>=expand("<cword>")<return>

" Swap two words
"
" Arguments:
" - 'obj' is the text object that select a word.
" - 'next_word' is the regex that jump to the beginning of the next word.
function! Swap_words(obj, next_word)
  let save_a = @a
  let save_b = @b
  let save_pos = getcurpos()
  " Cut the first word
  exe "normal \"ad" . a:obj
  let fst_pos = getcurpos()
  " Jump to next word
  if search(a:next_word, "Wz", fst_pos[1] + 1) == 0
    " Restore
    normal u
  else
    " Change the second word with the first
    exe "normal \"bc" . a:obj . "\<C-r>a\<Esc>"
    " Paste the second word in place of the first
    call setpos(".", fst_pos)
    normal "bP
  endif
  " Restore registers and position
  let @a = save_a
  let @b = save_b
  call setpos(".", save_pos)
endfunction

nnoremap <silent> <Plug>Swap_words :<c-u>call Swap_words('iw', '\w')<return>
nnoremap <silent> <Plug>Swap_WORDS :<c-u>call Swap_words('iW', '\w')<return>
nnoremap cx <Plug>Swap_words
nnoremap cX <Plug>Swap_WORDS

" Pipe a range of line from the current buffer into a shell command.
" If 'entire_buffer' is 1, the entire buffer is used, otherwise, the selected
" range or current line is used.
function! Pipe_range(cmd, entire_buffer) range
  if a:entire_buffer
    let start = 1
    let end = line("$")
  else
    let start = a:firstline
    let end = a:lastline
  endif
  let job_options = {
        \   "in_io": "buffer",
        \   "in_buf": bufnr("%"),
        \   "in_top": start,
        \   "in_bot": end
        \ }
  call term_start(a:cmd, job_options)
endfunction

nnoremap <Leader>! :call Pipe_range("bash -x", 1)<return>
xnoremap <Leader>! :call Pipe_range("bash -x", 0)<return>

" Fix a bug in the default java ftplugin
hi markdownH1 NONE
hi markdownH2 NONE
hi markdownHeadingRule NONE
hi markdownRule NONE
hi markdownCode NONE
hi markdownCodeBlock NONE
hi markdownIdDeclaration NONE
