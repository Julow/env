snippet let "let _ = _ in _"
let ${1:x} = ${2:y} in
${0}
endsnippet

snippet leto "let open _ in _"
let open ${1:M} in
${0}
endsnippet

snippet struct "struct _ end"
struct
  ${0}
end
endsnippet

snippet sig "sig _ end"
sig
  ${0}
end
endsnippet

snippet object "object _ end"
object
  ${0}
end
endsnippet

snippet do "do _ end"
do
  ${0}
done
endsnippet

snippet (fun "(fun _ -> .)"
(fun ${1:_} -> ${0:.})
endsnippet

snippet fun "fun _ -> ."
fun ${1:_} ->
	${0:.}
endsnippet

snippet | "| _ -> ."
| ${1:_} -> ${0:.}
endsnippet

snippet match
match ${1:${VISUAL}} with
| ${2:_} -> ${3:.}
endsnippet

snippet matchopt
match ${1:${VISUAL}} with
| Some ${2:_} -> ${3:.}
| None -> ${4:.}
endsnippet

snippet pr "Printf.printf"
Printf.printf "${1}\n%!"${0};
endsnippet

snippet epr "Printf.eprintf"
Printf.eprintf "${1}\n%!"${0};
endsnippet

snippet ppf "Format.fprintf"
Format.fprintf ppf "${1}"${0};
endsnippet

snippet ig "let _ = _ in"
let _ = ${1:.} in${0}
endsnippet

snippet f "f (.)"
${1:f} (${2:.})
endsnippet

snippet List.iter "List.iter (fun _ -> _) _"
List.iter (fun ${1:v} ->
  ${0}
) ${2:lst}
endsnippet

snippet List.fold "List.fold_left (fun acc _ -> _) _"
List.fold_left (fun acc ${1:v} ->
  ${0}
) ${3:[]} ${2:lst}
endsnippet

snippet assert "assert false"
let _ = assert false in
endsnippet
